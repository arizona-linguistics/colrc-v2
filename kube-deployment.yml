# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: postgres-volume
#   labels:  
#     app: psql
#     ver: psql-1
#     type: local
# spec:
#   storageClassName: manual
#   capacity:
#     storage: 1Gi
#   accessModes:
#     - ReadWriteMany
#   hostPath:
#     path: "/home/amyfou/colrc-v2/misc/db_data"
#   persistentVolumeReclaimPolicy: Retain

# ---

# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: postgres-volume-claim
# spec:
#   selector:
#     matchLabels:
#       app: psql
#       ver: psql-1
#   accessModes:
#     - ReadWriteMany
#   resources:
#     requests:
#       storage: 1Gi

# ---

# kind: PersistentVolume
# apiVersion: v1
# metadata:
#   name: postgres-initdb-pv-volume
#   labels:
#     type: local
#     app: postgres
# spec:
#   storageClassName: manual
#   capacity:
#     storage: 1Mi
#   accessModes:
#     - ReadOnlyMany
#   hostPath:
#     path: "/home/amyfou/colrc-v2/misc/sql"

# ---

# kind: PersistentVolumeClaim
# apiVersion: v1
# metadata:
#   name: postgres-initdb-pv-claim
#   labels:
#     app: postgres
# spec:
#   storageClassName: manual
#   accessModes:
#     - ReadOnlyMany
#   resources:
#     requests:
#       storage: 1Mi

# ---

# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: postgresql-initdb-config
# data:
#   command: 'psql -h localhost -p 5432 -d postgres -U postgres -f ./colrc.sql --password'

# ---

apiVersion: v1
kind: Deployment
metadata:
  name: colrc
  labels:
    app: colrc
spec:
  replicas: 1
  selector:
    matchLabels:
      app: colrc
  template:
    metadata:
      labels:
        app: colrc
    spec:
      containers:   
      - name: postgres
        image: docker.io/library/postgres:12
        imagePullPolicy: "IfNotPresent"
        volumeMounts:
          - mountPath: /docker-entrypoint-initdb.d
            name: postgres-initdb 
            readOnly: true
            defaultMode: 07
          - mountPath: /var/lib/postgresql/data 
            name: pgdatavol
        env:
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          value: 11chastq
        - name: POSTGRES_DB
          value: colrc
        ports:
          - containerPort: 5432
            hostPort: 5432
            protocol: TCP       
      - name: hasura
        image: docker.io/hasura/graphql-engine:v1.3.3
        imagePullPolicy: IfNotPresent
        env:
        - name: HASURA_GRAPHQL_DATABASE_URL
          # value: postgres://hasura:hasura@127.0.0.1:5432/hasura
          value: postgres://postgres:11chastq@localhost:5432/colrc?application_name=colrc
        - name: HASURA_GRAPHQL_ENABLE_CONSOLE
          value: "true"
        - name: HASURA_GRAPHQL_ADMIN_SECRET
          value: secret
        - name: HASURA_GRAPHQL_DEV_MODE
          value: "true"
        - name: HASURA_GRAPHQL_ENABLED_LOG_TYPES
          value: "startup, http-log, webhook-log, websocket-log, query-log" 
        - name: HASURA_GRAPHQL_ADMIN_SECRET
          value: myadminsecretkey 
        - name: HASURA_GRAPHQL_JWT_SECRET
          value: '{"type": "RS256", "key": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApNQ+GQ9sfCdPJh/J9Vo5\nqMBIm/EMiznaXbirJnr7Eispo6TPwdJJxBH1zqHgWuFi1Dik1fFLNyCUDxRoggEt\ntwGiHJIRVp/dN0sQRhHgCUO6P76gRncwFcP7VmcxqeDjVNS0h2P/4lf17ZF2Gl4k\nAGTsA8uQoSWnpFS+QS0Rzc8HcFrORTiToQny9G2h1ji9xU5d28onE/0kXPMNm27x\noznXgKkg6rS1Qz9RgKueU9riBWhsFZQoCImF2tT59buyIHCyRiMF0v3XKcLLg4Hn\ntPLnHE5dPcxwQapa1qvQ38xqgd4EVVolP15N6fEOGQarHMGPP939Ajxh51vr12yT\nswIDAQAB\n-----END PUBLIC KEY-----\n"}' 
        - name: HASURA_GRAPHQL_UNAUTHORIZED_ROLE
          value: anonymous 
        ports:
          - containerPort: 8080
            hostPort: 8080
            protocol: TCP
        resources: {}      
      - name: backend
      # if you build from sudo, use this
      # image: localhost/colrc-v2-backend
      # if you copy from sudo to amyfou, use this
      # image: docker.io/library/colrc-v2-backend 
        image: docker.io/library/colrc-v2-backend
        env: 
        - name: DB_HOST
          value: localhost
        - name: DB_DIALECT
          value: postgres
        - name: DB_NAME
          value: colrc
        - name: DB_USERNAME
          value: postgres
        - name: DB_PASSWORD
          value: 11chastq
        - name: ALGORITHM
          value: RS256
        - name: EXPIRES_IN
          value: 1d
        - name: JWT_PRIVATE_KEY
          value: "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEApNQ+GQ9sfCdPJh/J9Vo5qMBIm/EMiznaXbirJnr7Eispo6TP\nwdJJxBH1zqHgWuFi1Dik1fFLNyCUDxRoggEttwGiHJIRVp/dN0sQRhHgCUO6P76g\nRncwFcP7VmcxqeDjVNS0h2P/4lf17ZF2Gl4kAGTsA8uQoSWnpFS+QS0Rzc8HcFrO\nRTiToQny9G2h1ji9xU5d28onE/0kXPMNm27xoznXgKkg6rS1Qz9RgKueU9riBWhs\nFZQoCImF2tT59buyIHCyRiMF0v3XKcLLg4HntPLnHE5dPcxwQapa1qvQ38xqgd4E\nVVolP15N6fEOGQarHMGPP939Ajxh51vr12yTswIDAQABAoIBAEb3nvj5PBNEdX6L\np0+9FiBDEcAai/UR5qP9k6sQvjL3ZIkxt8XSvbHura/W4JsgeYW4EbiPmHvWygio\nF8sJqN4nlN3KQi7Sy9M3vXz9y0ER6QnzEFzmikyEwh1UdvyWeCqZHlVAx/ZzOs6b\nl4cIy2VkDn4f0liftss5NWUoe4bpkGj2wblJ62W/AHi0beGI1972Okh/6QVl5hYY\nOModIRWs77qD+45WTGQYUryhSudZYuWL73VFo4a1qhwXN5CiCInpu/L3+tOkOeJB\ntRlL8w/25DK9A7oZcwQC1Y+R3jE0D1/C/ykjeMyhOrTJXDskEqdFJ0VUHt/6cZ6r\neG5NSSECgYEA08pS3xLrRjrbnE+aUGJ0qZIUlcIt9TV1zCngXRu/aMDzraq+J+jn\nSs1/b5r4ZZK57K27gwrADz2hls/WVesczPjeOEAIsDa2X4T1BKI28Bt72esQjyft\nly1IEQX0VGP1ww16OrItkq08sGWLBwkAFVb3TVhw8Lrw5KfZVFUD3IMCgYEAxzxl\n2NwGec/x8xpAl3ciZLYtjLReK4+gIFcEAIZPM1vYko5Pliikrr7U3BK3wMzroLI9\nNYfydJXgD3hvD9MeVerwGPWZvfUNtO75v473112RirkzXgwrnBb9NwpgwUDDziHt\nEvg0kOaKwQSVfGStyz4618KK4r5VNafVocXEJRECgYB1mTRm1TR6rJfgtXq0A9dP\niOORPF8UdvjPwrjoOk4QNoOX/OTVeEdli7GlIOGoVM6UEuu5mbCHReuBuCoFTyWQ\n0udhSH0Ki3a8lzENv5zNuhUNLa7mLn+IoAYSHcJLUa3W/pbOHL2dYj/+moOWBnNb\nZgyvj9o2cTbtYB4W65XXTQKBgEQqxxH+nfyZiEfMCKOKMGtS5ZzJrZqr5naKLyVa\nzshcuWnTZSmUOFxNkJjHkrVVp5zwvv6MyAjZqrLAWweIDU4KNyHjDjovGQR561t+\nOBAoxH45RXj9IwKh3vsxAs+8MAJcGzgtUhbtujW2Mss/yzLJ1Oozdr+DrbXQ+cgC\n2UxxAoGAZxwPY5y+8BXtFsABmgd3OaDEpjNWOg9L3DS6eTq4RQ6k6G8gZW8q0HPP\ni+M3CziVevEJJmaZGV/doqh1AVVZ/RG2YfuXyXuxf68hnomKPd5mRbhEUnA9sXa5\nMlPJbC6WuOTjTLi12LNUIFwxPgeWQqC9Lo9RdBZj+qzLMQy7+DA=\n-----END RSA PRIVATE KEY-----\n"
        - name: JWT_PUBLIC_KEY
          value: "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApNQ+GQ9sfCdPJh/J9Vo5\nqMBIm/EMiznaXbirJnr7Eispo6TPwdJJxBH1zqHgWuFi1Dik1fFLNyCUDxRoggEt\ntwGiHJIRVp/dN0sQRhHgCUO6P76gRncwFcP7VmcxqeDjVNS0h2P/4lf17ZF2Gl4k\nAGTsA8uQoSWnpFS+QS0Rzc8HcFrORTiToQny9G2h1ji9xU5d28onE/0kXPMNm27x\noznXgKkg6rS1Qz9RgKueU9riBWhsFZQoCImF2tT59buyIHCyRiMF0v3XKcLLg4Hn\ntPLnHE5dPcxwQapa1qvQ38xqgd4EVVolP15N6fEOGQarHMGPP939Ajxh51vr12yT\nswIDAQAB\n-----END PUBLIC KEY-----\n"
        ports:
          - containerPort: 4000
            hostPort: 4000
      volumes:
        - name: postgres-initdb
          hostPath: 
            path: /home/amyfou/colrc-v2/misc/sql 
            type: Directory
          configMap:
            name: postgresql-initdb-config
          persistentVolumeClaim:
            claimName: postgres-initdb-pv-claim
          
        - name: pgdatavol
          hostPath:
            path: /home/amyfou/colrc-v2/misc/db_data
            type: Directory
          persistentVolumeClaim:
            claimName: postgres-volume-claim

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: hasura
  name: colrc
  namespace: default
spec:
  ports:
  - name: hasura
    protocol: TCP
    port: 8080
    targetPort: 8080
  - name: postgres
    protocol: TCP
    port: 5432
    targetPort: 5432
  selector:
    app: hasura
  # type: LoadBalancer

---

apiVersion: v1
kind: Endpoints
metadata:
  # the name here should match the name of the Service
  name: colrc
subsets:
  - addresses:
      - ip: localhost
    ports:
      - name: hasura
        port: 8080
      - name: postgres
        port: 5432