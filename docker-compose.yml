version: "3.6"
volumes:
  nginx_colrc:
#    external: true
services:
  hasura:
    image: hasura/graphql-engine:v1.3.3
    container_name: colrc-v2-hasura
    ports:
      - "8080:8080"
    depends_on:
      - "postgres"
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    env_file:
      - ./.env
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${DB_PASSWORD}@postgres:5432/${DB_NAME}?application_name=${DB_NAME}
      #HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:11chastq@postgres:5432/postgres
      HASURA_GRAPHQL_DEV_MODE: "true" # disable in prod
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
      HASURA_GRAPHQL_JWT_SECRET: '{"type": "RS256", "key": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApNQ+GQ9sfCdPJh/J9Vo5\nqMBIm/EMiznaXbirJnr7Eispo6TPwdJJxBH1zqHgWuFi1Dik1fFLNyCUDxRoggEt\ntwGiHJIRVp/dN0sQRhHgCUO6P76gRncwFcP7VmcxqeDjVNS0h2P/4lf17ZF2Gl4k\nAGTsA8uQoSWnpFS+QS0Rzc8HcFrORTiToQny9G2h1ji9xU5d28onE/0kXPMNm27x\noznXgKkg6rS1Qz9RgKueU9riBWhsFZQoCImF2tT59buyIHCyRiMF0v3XKcLLg4Hn\ntPLnHE5dPcxwQapa1qvQ38xqgd4EVVolP15N6fEOGQarHMGPP939Ajxh51vr12yT\nswIDAQAB\n-----END PUBLIC KEY-----\n"}'
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: anonymous
  postgres:
    image: postgres:12
    container_name: colrc-v2-postgres-db
    # see https://hub.docker.com/_/postgres/
    ports:
      - "5432:5432"
    restart: always
    env_file:
      - ./.env
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      #POSTGRES_PASSWORD: 11chastq
    volumes:
      - ./misc/db_data:/var/lib/postgresql/data
      # SQL scripts in this directory will be executed in alphabetical order
      - ./misc/sql:/docker-entrypoint-initdb.d
    healthcheck:
        # https://www.postgresql.org/docs/12/app-pg-isready.html
        test: ["CMD", "pg_isready", "--dbname=$DB_NAME", "--username=$DB_USERNAME"]
        start_period: 10s
        interval: 10s
        timeout: 5s
        retries: 10
  backend:
    container_name: colrc-v2-backend
    build:
      context: ./auth
      # specify .dev or .prod variant
      dockerfile: Dockerfile.dev
      labels:
        edu.arizona.colrc.description: "API for COLRC v2"
    depends_on:
      - postgres
      - hasura
    restart: always
    ports:
      - "4000:4000"
    env_file:
      - ./.env
    environment:
      # For dev, this should just use the service name
      DB_HOST: postgres
      # used by Sequelize
      DB_DIALECT: postgres
    volumes:
      - ./auth:/app:rw
      # don't bind mount node_modules
      #- /app/node_modules
  frontend:
    container_name: colrc-v2-frontend
    build:
      context: ./frontend
      # specify .dev or .prod variant
      dockerfile: Dockerfile.dev
      labels:
        edu.arizona.colrc.description: "Frontend for COLRC v2"
    depends_on:
      - backend
    restart: always
    ports:
      - "3000:3000"
    volumes:
      # FIXME: build the code and then deploy it to the volume
      #- nginx_colrc:/app/build:rw
      - ./frontend:/app:rw
  nginx:
    container_name: nginx
    build:
      context: ./nginx
      labels:
        edu.arizona.colrc.description: "Nginx for COLRC v2"
    depends_on:
      - frontend
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # FIXME: add files and colrc frontend
      - nginx_colrc:/var/www/colrc:rw
  file_upload:
    container_name: file_upload
    build: 
      context: ./file_upload
      dockerfile: Dockerfile.dev
      labels:
        edu.arizona.colrc.description: "File upload processor for COLRC v2"
    depends_on:
      - nginx
    restart: always
    ports:
      - "8081:8081"
    volumes:
      - nginx_colrc:/var/www/colrc:rw

